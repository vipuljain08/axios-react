{"version":3,"sources":["pin.svg","components/Userform.js","components/User.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Userform","props","className","onSubmit","getUser","type","name","placeholder","value","User","user","src","avatar_url","alt","bio","Icon","location","public_repos","followers","following","App","useState","updateUser","e","preventDefault","target","elements","username","axios","get","then","res","userInfo","data","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,iC,qOCc5BC,G,MAXE,SAACC,GACd,OACI,yBAAKC,UAAU,YACX,0BAAMC,SAAUF,EAAMG,SAClB,2BAAOC,KAAK,OAAOC,KAAK,WAAWC,YAAY,mBAC/C,2BAAOF,KAAK,SAASG,MAAM,e,iBC+B5BC,G,MAnCF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACZ,OACI,yBAAKR,UAAU,qBACX,yBAAKA,UAAU,eACX,yBAAKS,IAAKD,EAAKE,WAAYC,IAAKH,EAAKJ,QAEzC,yBAAKJ,UAAU,WACX,yBAAKA,UAAU,QAAQQ,EAAKJ,MAC5B,yBAAKJ,UAAU,OAAOQ,EAAKI,KAE3B,yBAAKZ,UAAU,OACX,0BAAMA,UAAU,aACZ,yBAAKS,IAAKI,IAAMb,UAAU,WAAYW,IAAI,UAE9C,0BAAMX,UAAU,YAAYQ,EAAKM,WAErC,yBAAKd,UAAU,QACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,eAAeQ,EAAKO,cACnC,yBAAKf,UAAU,aAAf,eAEJ,yBAAKA,UAAU,aACX,yBAAKA,UAAU,eAAeQ,EAAKQ,WACnC,yBAAKhB,UAAU,aAAf,cAEJ,yBAAKA,UAAU,aACX,yBAAKA,UAAU,eAAeQ,EAAKS,WACnC,yBAAKjB,UAAU,aAAf,mB,MCLTkB,MApBf,WAAgB,IAAD,EACcC,mBAAS,MADvB,mBACNX,EADM,KACAY,EADA,KAWb,OACE,yBAAKpB,UAAU,OACb,kBAAC,EAAD,CAAUE,QAXE,SAACmB,GACfA,EAAEC,iBACF,IAAMd,EAAOa,EAAEE,OAAOC,SAASC,SAASnB,MAExCoB,IAAMC,IAAN,uCAA0CnB,IAAQoB,MAAK,SAAAC,GACrD,IAAMC,EAAWD,EAAIE,KACrBX,EAAWU,SAOTtB,EAAO,kBAAC,EAAD,CAAMA,KAAMA,IAAU,0DCTjBwB,QACW,cAA7BC,OAAOnB,SAASoB,UAEe,UAA7BD,OAAOnB,SAASoB,UAEhBD,OAAOnB,SAASoB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.91875733.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pin.4b0ff2f3.svg\";","import React from 'react'\r\nimport '../styles/Userform.css'\r\n\r\nconst Userform = (props) => {\r\n    return (\r\n        <div className=\"Userform\">\r\n            <form onSubmit={props.getUser}>\r\n                <input type=\"text\" name=\"username\" placeholder=\"Enter Username\" />\r\n                <input type=\"submit\" value=\"submit\" />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Userform","import React from 'react'\r\nimport Icon from '../pin.svg'\r\nimport '../styles/User.css'\r\n\r\nconst User = ({ user }) => {\r\n    return (\r\n        <div className=\"User profile-card\">\r\n            <div className=\"img-wrapper\">\r\n                <img src={user.avatar_url} alt={user.name} />\r\n            </div>\r\n            <div className=\"content\">\r\n                <div className=\"name\">{user.name}</div>\r\n                <div className=\"bio\">{user.bio}</div>\r\n\r\n                <div className=\"loc\">\r\n                    <span className=\"loc__icon\">\r\n                        <img src={Icon} className=\"loc-logo\"  alt=\"icon\" />\r\n                    </span>\r\n                    <span className=\"loc__txt\">{user.location}</span>\r\n                </div>\r\n                <div className=\"info\">\r\n                    <div className=\"info-item\">\r\n                        <div className=\"info__title\">{user.public_repos}</div>\r\n                        <div className=\"info__txt\">Repository</div>\r\n                    </div>\r\n                    <div className=\"info-item\">\r\n                        <div className=\"info__title\">{user.followers}</div>\r\n                        <div className=\"info__txt\">Followers</div>\r\n                    </div>\r\n                    <div className=\"info-item\">\r\n                        <div className=\"info__title\">{user.following}</div>\r\n                        <div className=\"info__txt\">Following</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User","import React, { useState } from 'react';\nimport axios from 'axios'\nimport Userform from './components/Userform'\nimport User from './components/User'\nimport './App.css';\n\nfunction App() {\n  const [user, updateUser] = useState(null)\n  const getUser = (e) => {\n    e.preventDefault()\n    const user = e.target.elements.username.value\n    // console.log(user)\n    axios.get(`https://api.github.com/users/${user}`).then(res => {\n      const userInfo = res.data\n      updateUser(userInfo)\n    })\n  }\n  return (\n    <div className=\"App\">\n      <Userform getUser={getUser} />\n      {/* {repos ? <p>Number of Public Repos: {repos}</p> : <p>Please enter the username</p>} */}\n      { user ? <User user={user}/> : <p>Please enter the username</p> }\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}